/**** 1D Euler Equations - Sod Shock Tube with gravitational Force  ****/
/***********************************************************************/

/**
 * 1D uniform, regular and periodic cartesian mesh.
 * u != cst -> Saiph's generated code contains a convective gradient operator
 * which applies the CTU, TVD, leonard scheme O(dx^3)
 *
 * */

/*** Simulation parameters ***/
// Mesh size
val XSIZE = 1*m
// Space discretization factor
val H = 2.5*mm
// Time discretization factor
val Dt = 0.2*ms
// Number of steps
val nsteps = 1000

/*** Cartesian mesh definition ***/
// 1D Cartesian mesh, set through init and end coords
val mesh = CartesianMesh(XSIZE)
mesh.discretize(H)

/*** Variables and constants definition ***/
val gamma = Constant(Unitless)("gamma", 1.4 * Unitless)
val g = Constant(m/(s*s))("uniform gravitational force", 1 * m/(s*s))

val rho = ProblemVariable(kg/m3)("density", mesh, (x, y, z) => {
  if(x < 0.5*m) 1 * kg/m3
  else 0.125 * kg/m3
})
rho.setNeumann(CFaceXMIN, 0 * (kg/m3)/m)
rho.setNeumann(CFaceXMAX, 0 * (kg/m3)/m)

val rho_u = ProblemVariable(kg/(m2*s))("momentum", mesh, Vector(0 * kg/(m2*s)), List[Rep[String]]("rho_ux"))
rho_u.setDirichlet(CFaceXMIN, Vector(0 * kg/(m2*s)))
rho_u.setDirichlet(CFaceXMAX, Vector(0 * kg/(m2*s)))

val u = ProblemVariable(m/s)("velocity", mesh, Vector(0 * m/s), List[Rep[String]]("ux"))
u.setDirichlet(CFaceXMIN, Vector(0 * m/s))
u.setDirichlet(CFaceXMAX, Vector(0 * m/s))

val p = ProblemVariable(Pa)("pressure", mesh, (x, y, z) => {
  if(x < 0.5*m) 1 * Pa
  else 0.1 * Pa
})

// e is initialized through an init equation
val e = ProblemVariable(kg/(m*s*s))("energy", mesh, 0 * kg/(m*s*s))
e.setNeumann(CFaceXMIN, 0 * kg/(m2*s*s))
e.setNeumann(CFaceXMAX, 0 * kg/(m2*s*s))
// init eq for e
val initEq = Equation(e, p/(gamma - 1.0*Unitless) + (0.5*Unitless)*(u*rho_u))

/*** Equation definition ***/
/*** 1D Euler equations without external forces ***/
val continuityEq = Equation(dt(rho), - rho * div(u) - u * grad(rho))
val momentumEq = Equation(dt(rho_u), - rho_u.i * div(u) - u * grad(rho_u.i) - grad(p).i - rho*g)
val energyEq = Equation(dt(e), - e * div(u) - u * grad(e) -  p * div(u) - u * grad(p) - rho_u*g)
val pressureEq = Equation(p, (e - (0.5*Unitless)*(u*rho_u)) * (gamma - 1.0*Unitless))
val velocityEq = Equation(u, rho_u.i/rho)

/*** Problem definition ***/
val eulerEqProb = Problem(mesh)(initEq)(continuityEq, momentumEq, energyEq, pressureEq, velocityEq)

/*** Stepper definition ***/
Stepper(eulerEqProb, Dt, nsteps, IntegrationMethod.RK3)("1DEulerEq_SodTube_Gravi", OutputFormat.Binary, SamplingMethod.Periodic, 10)


