/******************* 1D Linear advection of a Sine Wave ********************/
/* Pure advection of a sinusoidal profile with constant advection velocity */
/***************************************************************************/
/**
 * 1D uniform, regular and periodic cartesian mesh.
 * u = cst -> Saiph's generated code contains the "advec" operator
 * which applies the method of lines, carrying no truncation error
 * for a pure transport phenomena if and only if v*(dt/dx) = positive integer
 * (cfl = positive integer)
 *
 * For u being a problem variable, the same result is obtained through the stabgrad
 * operator (accuracy set to 1) if and only if cfl = 1.
 *
 * If cfl > 1, and running the application in parallel, a higher
 * accuracy (than the default one, which is equal to 2) should be set, since
 * in that case, the cfl indicates the number of neighbours needed to transport
 * the profile.
 * */

/*** Simulation parameters ***/
// Mesh size
val XSIZE = 1*m
// Space discretization factor
val H = 1*mm
// Time discretization factor
val Dt = 1*ms
// Number of steps
val nsteps = 1000

/*** Cartesian mesh definition ***/
val mesh = CartesianMesh(XSIZE)
// Spatial discretisation factor
mesh.discretize(H)
// Grid BCs
mesh.setPeriodic(DirX)

/*** Variables and constants definition ***/
val u = Constant(m/s)("velocity", 1 * m/s)
val phi = ProblemVariable(Unitless)("Phi", mesh, (x, y, z) => {
  sin(2.0*PI*x)
})

/*** Equation definition ***/
val adveq = Equation(dt(phi), -u * grad(phi))

/*** Problem definition ***/
val probAdv = Problem(mesh)(adveq)

/*** Stepper definition ***/
Stepper(probAdv, Dt, nsteps, IntegrationMethod.Euler)("1DSineWave", OutputFormat.Binary, SamplingMethod.Periodic, 5)
