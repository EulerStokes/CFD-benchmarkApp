/************** 2D Taylor-Green Vortex **********************/
/************************************************************/


/** ==Overview==
  * Governing equations: 2D incompressible Navier-Stokes.
  * Unsteady flow of a decaying vortex.
  */

// 2D uniform regular Cartesian mesh
val piL = 0.016 * m
val L = piL/PI * m
val mesh = CartesianMesh((-piL, piL), (-piL, piL))
mesh.discretize(7.98E-5*m, 7.98E-5*m)
mesh.setPeriodic(DirX)
mesh.setPeriodic(DirY)


// Constants, parameters and units
val m3 = m*m*m
// Initial flow parameters
val U0 = 33.7 * m/s
val T0 = 273.0 * K
val rho0 = 0.1946 * kg/m3
val p0 = 15778.49 * Pa
// R constant of gases
val R = 297.0 * J/(kg*K)
// Specific heat capacities
val cv = 743.0 * J/(kg*K)
val cp = 1040.0 * J/(kg*K)
// Specific heat ratio
val gamma = 1.4 * Unitless
// Dynamics shear viscosity
val mu0 = 1.67E-5 * kg/(m*s)
// Prandtl number
val Pr = 0.71 * Unitless

// Problem Variables
// Velocity
val u = ProblemVariable(Speed)("Velocity", mesh, (x, y, z) => {
  val ux_init = U0*sin(x/L)*cos(y/L)
  val uy_init = -U0*cos(x/L)*sin(y/L)
  Vector(ux_init, uy_init)
}, List[Rep[String]]("X", "Y"))
u.notOut()
// Temperature
val T = ProblemVariable(Temperature)("Temperature", mesh, T0)
T.notOut()
// Density
val rho = ProblemVariable(kg/m3)("Density", mesh, 0.0 * kg/m3)
rho.notOut()
// Pressure
val p = ProblemVariable(Pressure)("Pressure", mesh, (x, y, z) => {
  p_init = p0 + ((3*rho0*U0*U0)/16)*(cos(2*x/L)+cos(2*y/L))
})
p.notOut()
// Momentum
val rhoU = Problemvariable(kg/m2/s)("rho*u", mesh, vector(0 * kg/m2/s, 0 * kg/m2/s), list[rep[string]]("X", "Y"))
rhoU.notOut()
// Energy
val rhoE = Problemvariable(kg/m/s2)("rho*E", mesh, 0 * kg/m/s2)
rhoE.notOut()
// Vorticity
val vort = ProblemVariable(Unitless/s)("vorticity", mesh, (x, y, z) => {
  vort_init = 2.0*U0/L*sin(x/L)*sin(y/L))
}

// Init equations
val initRho = Equation(rho, p/(R*T0))
val initRhoU = Equation(rhoU, rho*u.comp)
val initRhoE = Equation(rhoE, rho*((cv*T)+(0.5*u*u)))

// Governing Equations
val continuity = Equation(dt(rho), -convDiv(u,rho))
val momentum = Equation(dt(rhoU), -convDiv(u, rhoU.comp, p) + mu*lapla(u.comp))
val energy = Equation(dt(rhoE), -convDiv(u, rhoE+p) + mu*(u(0)*lapla(u(0)) + u(1)*lapla(u(1)))) + mu*cp/Pr*lapla(T))
val velocity = Equation(u, rhoU.comp/rho)
val temperature = Equation(T, (1/cv)*(rhoE/rho - 0.5*u*u))
val state = Equation(p, rho*R*T)

// Validation Equations (only computed for output time-steps)
val eqVort = Equation(vort, der(0, u(1)) - der(1, u(0)))

// Problem definition
val prob = Problem(mesh)(initRho, initRhoU, initRhoE)(continuity, momentum, energy, velocity, temperature, state)(eqVort)

// Time parameters
def DELTA_TIME = 7.6E-8 * s
def N_STEPS = 1000000

// Solver
Stepper(prob, DELTA_TIME, N_STEPS, IntegrationMethod.RK3)("2DTGV", OutputFormat.VTK, SamplingMethod.Periodic, 2000)
